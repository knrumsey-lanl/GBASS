X<-matrix(runif(n*p),ncol=p) # inputs on 0-1 scale
y<-matrix(nrow=nrow(X),ncol=nt)
#Parameter range chosen so that P(# New Infections > 0) >= 0.05
for(i in 1:n){
param <- param.icm(inf.prob = X[i,1]*.5 + .25, act.rate = X[i,2]*1 + .5) # rescale inputs...
init <- init.icm(s.num = 5000, i.num = 1) # 500 suceptible, 1 infected
control <- control.icm(type = "SI", nsims = 1, nsteps = nt) # single simulation
mod <- icm(param, init, control)
y[i,]<-unlist(mod$epi$i.num)
}
matplot(t(y),type='l')
y <- y[,21]
?icm
y
par(mfrow=c(1,1))
dim(y)
y
## get training data - 2000 model runs with 3 parameters (but only 2 active), 30 time steps
n<-2000
p<-2
nt<-21
X<-matrix(runif(n*p),ncol=p) # inputs on 0-1 scale
y<-matrix(nrow=nrow(X),ncol=nt)
#Parameter range chosen so that P(# New Infections > 0) >= 0.05
for(i in 1:n){
param <- param.icm(inf.prob = X[i,1]*.5 + .25, act.rate = X[i,2]*1 + .5) # rescale inputs...
init <- init.icm(s.num = 5000, i.num = 1) # 500 suceptible, 1 infected
control <- control.icm(type = "SI", nsims = 1, nsteps = nt) # single simulation
mod <- icm(param, init, control)
y[i,]<-unlist(mod$epi$i.num)
}
matplot(t(y),type='l')
dim(y)
matplot(t(y[,1:14]), type='l')
matplot(t(y[,1:21]), type='l')
21*2000
?bass
20*1000
ind <- (20*(i-1) + 1):(20*i)
ind
i
dim(X)
dim(y)
xx <- matrix(NA, nrow=40000, ncol=2)
xxf <- rep(NA, length(40000))
yy <- rep(NA, length(40000))
for(i in 1:n){
ind <- (20*(i-1) + 1):(20*i)
xx[ind,] <- X[i,]
yy[ind] <- y[i,1:20]
xxf[ind] <- 1:20
}
mod <- bass(xx, yy, xx.func=xxf)
xxf
xxf
sigma<-1 # noise sd
n<-500 # number of observations
nfunc<-50 # size of functional variable grid
xfunc<-seq(0,1,length.out=nfunc) # functional grid
x<-matrix(runif(n*9),n,9) # 9 non-functional variables, only first 4 matter
X<-cbind(rep(xfunc,each=n),kronecker(rep(1,nfunc),x))
X
class(X)
kronecker()
kronecker
?kronecker
nfunc <- 20
xfunc <- seq(0,1,length=nfunc)
dim(X)
dim(XX)
##############################
## get training data - 2000 model runs with 3 parameters (but only 2 active), 30 time steps
n<-2000
p<-2
nt<-21
X<-matrix(runif(n*p),ncol=p) # inputs on 0-1 scale
y<-matrix(nrow=nrow(X),ncol=nt)
#Parameter range chosen so that P(# New Infections > 0) >= 0.05
for(i in 1:n){
param <- param.icm(inf.prob = X[i,1]*.5 + .25, act.rate = X[i,2]*1 + .5) # rescale inputs...
init <- init.icm(s.num = 5000, i.num = 1) # 500 suceptible, 1 infected
control <- control.icm(type = "SI", nsims = 1, nsteps = nt) # single simulation
mod <- icm(param, init, control)
y[i,]<-unlist(mod$epi$i.num)
}
matplot(t(y),type='l')
dim(X)
nfunc <- 20
xfunc <- seq(0,1,length=nfunc)
#Fit Emulators
mod <- bass(X, y, xx.func=xfunc)
#Fit Emulators
mod <- bass(X, y[,1:20], xx.func=xfunc)
nfunc <- 21
xfunc <- seq(0,1,length=nfunc)
xx <- cbind(rep(x))
#Fit Emulators
mod <- bass(X, y, xx.func=xfunc)
#Format data
xx <- matrix(NA, nrow=40000, ncol=2)
xxf <- rep(NA, length(40000))
yy <- rep(NA, length(40000))
for(i in 1:n){
ind <- (20*(i-1) + 1):(20*i)
xx[ind,] <- X[i,]
yy[ind] <- y[i,1:20]
xxf[ind] <- 1:20
}
xx <- cbind(xx, xxf)
dim(xx)
#Format data for gbass
xx <- matrix(NA, nrow=40000, ncol=2)
xxf <- rep(NA, length(40000))
yy <- rep(NA, length(40000))
for(i in 1:n){
ind <- (20*(i-1) + 1):(20*i)
xx[ind,] <- X[i,]
yy[ind] <- y[i,1:20]
xxf[ind] <- 1:20
}
xx <- cbind(xx, xxf)
nfunc <- 20
xfunc <- seq(0,1,length=nfunc)
#Fit Emulators
mod <- bass(X, y[,1:20], xx.func=xfunc)
dim(xx)
?qbass
?gbass
#Qbass emulators (yikes might take a while without functional capabilities)
mod_q1 <- qbass(xx, yy, q=0.5, nmcmc=5000, nburn=4001, a_lambda=0.1, b_lambda=0.1)
dim(X)
range(X)
range(xx)
which.max(xx)
xx <- matrix(NA, nrow=40000, ncol=2)
xxf <- rep(NA, length(40000))
yy <- rep(NA, length(40000))
for(i in 1:n){
ind <- (20*(i-1) + 1):(20*i)
xx[ind,] <- X[i,]
yy[ind] <- y[i,1:20]
xxf[ind] <- seq(0, 1, length.out=20)
}
xx <- cbind(xx, xxf)
xxf
range(xx)
#Qbass emulators (yikes might take a while without functional capabilities)
mod_q1 <- qbass(xx, yy, q=0.5, nmcmc=500, nburn=401, a_lambda=0.1, b_lambda=0.1)
#Simulate calibration data
zeta <- function(x, theta){
param <- param.icm(inf.prob = theta[1]*.5 + .25, act.rate = theta[2]*1 + .5) # rescale inputs...
init <- init.icm(s.num = 5000, i.num = 1) # 500 suceptible, 1 infected
control <- control.icm(type = "SI", nsims = 1, nsteps = x) # single simulation
mod <- icm(param, init, control)
y<-unlist(mod$epi$i.num)[x]
}
zeta(14, c(0.5, 0.5))
print(zeta(14, c(0.5, 0.5)))
#Simulate calibration data
zeta <- function(x, theta){
param <- param.icm(inf.prob = theta[1]*.5 + .25, act.rate = theta[2]*1 + .5) # rescale inputs...
init <- init.icm(s.num = 5000, i.num = 1) # 500 suceptible, 1 infected
control <- control.icm(type = "SI", nsims = 1, nsteps = x) # single simulation
mod <- icm(param, init, control)
unlist(mod$epi$i.num)[x]
}
zeta(13, 0.5)
zeta(13, c(0.5, 0.5))
zeta(13, c(0.5, 0.5))
zeta(13, c(0.5, 0.5))
zeta(13, c(0.5, 0.5))
zeta(13, c(0.5, 0.5))
zeta(13, c(0.5, 0.5))
zeta(13, c(0.5, 0.5))
zeta(13, c(0.5, 0.5))
zeta(13, c(0.5, 0.5))
zeta(13, c(0.5, 0.5))
zeta(13, c(0.5, 0.5))
zeta(13, c(0.5, 0.5))
zeta(13, c(0.5, 0.5))
zeta(13, c(0.5, 0.5))
?bass
?gbass
?bass
predict(mod, c(0.5, 0.5,17/20))
predict(mod, c(0.5, 0.5))
dim(predict(mod, c(0.5, 0.5)))
matplot(t(predict(mod, c(0.5, 0.5))), type='l')
?predict.bass
seq(0, 1, length=5)
seq(0, 1, length.out=5)
seq(0, 1, length.out=7)
1/6
xx
dim(xx)
length(yy)
parallel::detectCores()
mods <- mclapply((1:5)/6,
function(qq) qbass(matrix(mcycle$x),
mcycle$accel,q=qq,
maxInt=3,
w_prior=list(type="GIG", p=0, a=0, b=0, prop_sigma=0.2),
a_lambda=.1, b_lambda=.1,
nmcmc=5000, nburn=4001, thin=1),
mc.cores = 5, mc.preschedule = F)
xx
yy
mods <- mclapply((1:5)/6,
function(qq) qbass(xx,
yy, q=qq,
maxInt=3,
w_prior=list(type="GIG", p=0, a=0, b=0, prop_sigma=0.2),
a_lambda=.1, b_lambda=.1,
nmcmc=5000, nburn=4001),
mc.cores = 5, mc.preschedule = F)
mods
mods[[1]]
65/12
78/12
library(GBASS)
?ff1
n <- 100 #Number of observations
p <- 4   #Number of variables (beyond p = 2, variables are inert)
X <- matrix(runif(n*p), nrow=n)
y <- apply(X, 1, ff1)
gbass(X, y)
gbass(X, y, nmcmc=1000, nburn=9001, thin=2)
gbass(X, y, nmcmc=1000, nburn=901, thin=2)
ts.plotmod <- gbass(X, y, nmcmc=1000, nburn=901, thin=2)
ts.plot(ts.plotmod$w)
ts.plot(ts.plotmod$v)
ts.plot(ts.plotmod$tau)
ts.plot(ts.plotmod$lam)
ts.plot(ts.plotmod$M)
ts.plot(ts.plotmod$a)
ts.plot(ts.plotmod$aDrm(ts.plotmod))
rm(ts.plotmod)
ls
?build_prior
?rgig2
?gbass
?hbass
hbass
?gbass
?rmpon
n <- 10000
alpha <- 5
gamma <- 1
mu <- 2
y <- rep(NA, n)
for(i in 1:n){
y[i] <- rmpon(1, alpha, gamma, mu)
}
hist(y, breaks=30, freq=F)
c <- integrate(dmpon, lower=0, upper=20, alpha=alpha, gamma=gamma, mu=mu)$value
curve(dmpon(x, alpha, gamma, mu)/c, add=TRUE, lwd=2, col='blue')
gm <- gbass(X, y)
?ff1
n <- 100 #Number of observations
p <- 4   #Number of variables (beyond p = 2, variables are inert)
X <- matrix(runif(n*p), nrow=n)
y <- apply(X, 1, ff1)
gbass(X, y)
gm <- gbass(X, y, nmcmc=1000)
gm <- gbass(X, y, nmcmc=1000, nburn=901)
bm <- gm2bm(gm)
bm <- GBASS:::gm2bm(gm)
class(bm)
sobol(bm)
plot(sobol(bm))
tmp <- function(a, b=a/2) print(b)
tmp(10)
nw_triangle
nw_gamma_prior()
nw_gamma_prior()
nw_gamma_prior
nw_gamma_prior()
nw_gamma_prior(p1=0.5, p2=0.0001)
var(rgamma(10000, 1, .1))
y
var(y)
.1*sqrt(10)
nw_gamma_prior(p1=0.5, p2=1e-3)
nw_gamma_prior(p1=0.5, p2=1e-4)
library(devtools)
library(roxygen2)
document()
library(GBASS)
library(GBASS)
?nwbass
?gbass
?rmpon
?dmpon
2^6
2^6*3
2^4*9
library(devtools)
devtools::build_readme()
library(roxygen2)
document()
document()
document()
library(GBASS)
build_readme
build_readme()
build_readme()
build_readme()
GBASS::ff1
knitr::opts_chunk$set(echo = TRUE)
X <- matrix(runif(100, -2, 2))
y <- apply(X, 1, GBASS::ff1) + rnorm(100, 0, 1)
X <- matrix(runif(100, -2, 2))
y <- apply(X, 1, GBASS::ff1) + rnorm(100, 0, 1)
var(y)
X <- matrix(runif(100, -2, 2), ncol=2)
y <- apply(X, 1, GBASS::ff1) + rnorm(100, 0, 1)
var(y)
X <- matrix(runif(100, 0, 1), ncol=2)
y <- apply(X, 1, GBASS::ff1) + rnorm(100, 0, 1)
var(y)
?tbass
tbass
?tbass
?gbass
?hbass
hbass
?gbass
mcycle
GBASS::mcycle
MASS::mcycle
X <- MASS::mcycle
X <- MASS::mcycle$times
dim(X)
X <- MASS::mcycle$times
length(X)
X <- MASS::mcycle$times
y <- MASS::mcycle$accel
plot(X, y)
qbass
library(BASS)
library(MASS)
X <- MASS::mcycle$times
X <- matrix(BASS:::scale.range(X))
y <- MASS::mcycle$accel
# Fit BASS model for the 90^th percentile of the response distribution
qbass(X, y, q=0.9,
maxInt=1,
w_prior=list(type="GIG", p=0, a=0, b=0, prop_sigma=0.2),
a_lambda=.03, b_lambda=.03,
nmcmc=2000, 1001)
library(BASS)
library(MASS)
X <- MASS::mcycle$times
X <- matrix(BASS:::scale.range(X))
y <- MASS::mcycle$accel
# Fit BASS model for the 90^th percentile of the response distribution
qbass(X, y, q=0.9,
maxInt=1,
w_prior=list(type="GIG", p=0, a=0, b=0, prop_sigma=0.2),
a_lambda=.03, b_lambda=.03,
nmcmc=2000, nburn=1001)
dim(runif(10))
document()
library(BASS)
library(MASS)
X <- MASS::mcycle$times
X <- BASS:::scale.range(X))
library(BASS)
library(MASS)
X <- MASS::mcycle$times
X <- BASS:::scale.range(X)
y <- MASS::mcycle$accel
# Fit BASS model for the 90^th percentile of the response distribution
mod3 <- qbass(X, y, q=0.9,
maxInt=1,
a_lambda=.03, b_lambda=.03,
nmcmc=2000, nburn=1001, verbose=FALSE)
document()
hist(rgamma(1000, .1, 4))
curve(dgamma(x, .1, 4))
curve(dgamma(x, 2, 8))
curve(dgamma(x, 1.5, 8))
curve(dgamma(x, 1.5, 9))
mean(rgamma(1000, 1.5, 9))
1.5/9
?nwbass
X <- matrix(runif(200, 0, 1), ncol=2)             #Simulate x values
y <- apply(X, 1, GBASS::ff1)                      #Simulate y values
y <- y + (rgamma(200, 1.5, 9) - 1/6)              #Add (mean zero) skewed errors
# Fit a BASS model with a Normal-Wald likelihood
mod4 <- nwbass(X, y, nmcmc=5000, nburn=4001, lag_beta = 500)
nrow(X)
y
X <- matrix(runif(400, 0, 1), ncol=2)             #Simulate x values
y <- apply(X, 1, GBASS::ff1)                      #Simulate y values
y <- y + (rgamma(200, 1.5, 9) - 1/6)              #Add (mean zero) skewed errors
# Fit a BASS model with a Normal-Wald likelihood
mod4 <- nwbass(X, y, nmcmc=5000, nburn=4001, lag_beta = 500)
X <- matrix(runif(400, 0, 1), ncol=2)             #Simulate x values
y <- apply(X, 1, GBASS::ff1)                      #Simulate y values
y <- y + (rgamma(200, 1.5, 9) - 1/6)              #Add (mean zero) skewed errors
# Fit a BASS model with a Normal-Wald likelihood
mod4 <- nwbass(X, y, nmcmc=5000, nburn=4001, lag_beta = 500, maxInt=2)
plot(mod4)
mod4
class(mod4)
predict(mod4, X)
tmp = predict(mod4, X)
apply(tmp,2,mean)
length(apply(tmp,2,mean))
length(apply(tmp,1,mean))
(apply(tmp,1,mean))
plot(y, (apply(tmp,1,mean)))
rnw
mod4$bet
mod4$w
hist(y - apply(tmp,1,mean)))
hist(y - apply(tmp,1,mean))
hist(y - apply(tmp,1,mean), freq=FALSE)
curve(dgamma(x, 1.5, 9))
hist(y - apply(tmp,1,mean), freq=FALSE)
curve(dgamma(x, 1.5, 9), add=TRUE)
mod5 <- nwbass(X, y, nmcmc=5000, nburn=4001, lag_beta = 500, maxInt=2))
mod5 <- nwbass(X, y, nmcmc=5000, nburn=4001, lag_beta = 500, maxInt=2)
tmp <- predict(mod5, X)
hist(y - apply(tmp,1,mean), freq=FALSE, breaks=30)
curve(dgamma(x, 1.5, 9), add=TRUE)
plot(y, apply(tmp,1,mean))
abline(0, 1, lwd=2, col='red')
mod5 <- nwbass2(X, y, nmcmc=5000, nburn=4001, lag_beta = 500, maxInt=2)
tmp <- predict(mod5, X)
hist(y - apply(tmp,1,mean), freq=FALSE, breaks=30)
curve(dgamma(x, 1.5, 9) - 1/6, add=TRUE)
mean(rgamma(1000, 1.5, 9))
tmp <- predict(mod4, X)
hist(y - apply(tmp,1,mean), freq=FALSE, breaks=30)
curve(dgamma(x, 1.5, 9) - 1/6, add=TRUE)
curve(dgamma(x+1/6, 1.5, 9) - 1/6, add=TRUE)
tmp <- predict(mod5, X)
hist(y - apply(tmp,1,mean), freq=FALSE, breaks=30)
curve(dgamma(x+1/6, 1.5, 9) - 1/6, add=TRUE)
hist(y - apply(tmp,1,mean), freq=FALSE, breaks=30, ylim=c(0, 5))
curve(dgamma(x+1/6, 1.5, 9) - 1/6, add=TRUE)
curve(dgamma(x+1/6, 1.5, 9) - 1/6, add=TRUE, lwd=2, col="orange")
tmp <- predict(mod5, X)
hist(y - apply(tmp,1,mean), freq=FALSE, breaks=30, ylim=c(0, 5))
curve(dgamma(x+1/6, 1.5, 9), add=TRUE, lwd=2, col="orange")
plot(y, apply(tmp,1,mean))
abline(0, 1, lwd=2, col='red')
document()
library(GBASS)
knitr::opts_chunk$set(echo = TRUE)
library(GBASS)
p <- 5                                            #Number of inputs (only first two are active)
X <- matrix(runif(p*100, 0, 1), ncol=p)           #Simulate x values
y <- apply(X, 1, GBASS::ff1) + rnorm(100, 0, 1)   #Simulate y values
# Fit a model with a t(30) likelihood
mod6 <- tbass(X, y, df=30)
p <- 5                                            #Number of inputs (only first two are active)
X <- matrix(runif(p*100, 0, 1), ncol=p)           #Simulate x values
y <- apply(X, 1, GBASS::ff1) + rnorm(100, 0, 1)   #Simulate y values
# Fit a model with a t(30) likelihood
mod6 <- tbass(X, y, df=30, nmcmc=2000, nburn=1001)
p <- 5                                            #Number of inputs (only first two are active)
X <- matrix(runif(p*100, 0, 1), ncol=p)           #Simulate x values
y <- apply(X, 1, GBASS::ff1) + rnorm(100, 0, 1)   #Simulate y values
# Fit a model with a t(30) likelihood
mod6 <- tbass(X, y, df=30, nmcmc=2000, nburn=1001, verbose=FALSE)
p <- 5                                            #Number of inputs (only first two are active)
X <- matrix(runif(p*100, 0, 1), ncol=p)           #Simulate x values
y <- apply(X, 1, GBASS::ff1) + rnorm(100, 0, 1)   #Simulate y values
# Fit a model with a t(30) likelihood
mod6 <- tbass(X, y, df=30, nmcmc=200, nburn=101, verbose=FALSE)
# Convert "gbass" object to "bass" object
mod6_bass <- gm2bm(mod6)
p <- 5                                            #Number of inputs (only first two are active)
X <- matrix(runif(p*100, 0, 1), ncol=p)           #Simulate x values
y <- apply(X, 1, GBASS::ff1) + rnorm(100, 0, 1)   #Simulate y values
# Fit a model with a t(30) likelihood
mod6 <- tbass(X, y, df=30, nmcmc=2000, nburn=1001, verbose=FALSE)
# Convert "gbass" object to "bass" object
mod6_bass <- gm2bm(mod6)
# Use BASS package to get sobol indices
sob <- BASS::sobol(mod6_bass)
p <- 5                                            #Number of inputs (only first two are active)
X <- matrix(runif(p*100, 0, 1), ncol=p)           #Simulate x values
y <- apply(X, 1, GBASS::ff1) + rnorm(100, 0, 1)   #Simulate y values
# Fit a model with a t(30) likelihood
mod6 <- tbass(X, y, df=30, nmcmc=2000, nburn=1001, verbose=FALSE)
# Convert "gbass" object to "bass" object
mod6_bass <- gm2bm(mod6)
class(mod6_bass)
sobol(mod6_bass)
?sobol
?sobol
sob = sobol(mod6_bass)
plot(sob)
sob = GBASS::sobol(mod6_bass)
sob = BASS::sobol(mod6_bass)
p <- 5                                            #Number of inputs (only first two are active)
X <- matrix(runif(p*100, 0, 1), ncol=p)           #Simulate x values
y <- apply(X, 1, GBASS::ff1) + rnorm(100, 0, 1)   #Simulate y values
# Fit a model with a t(30) likelihood
mod6 <- tbass(X, y, df=30, nmcmc=200, nburn=101, verbose=FALSE)
# Convert "gbass" object to "bass" object
mod6_bass <- gm2bm(mod6)
# Get sobol indices
sob <- GBASS::sobol(mod6_bass)
plot(sob)
document()
?nwbass2
library(GBASS)
